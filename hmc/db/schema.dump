-- /*
--  * Licensed to the Apache Software Foundation (ASF) under one
--  * or more contributor license agreements.  See the NOTICE file
--  * distributed with this work for additional information
--  * regarding copyright ownership.  The ASF licenses this file
--  * to you under the Apache License, Version 2.0 (the
--  * "License"); you may not use this file except in compliance
--  * with the License.  You may obtain a copy of the License at
--  *
--  *     http://www.apache.org/licenses/LICENSE-2.0
--  *
--  * Unless required by applicable law or agreed to in writing, software
--  * distributed under the License is distributed on an "AS IS" BASIS,
--  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  * See the License for the specific language governing permissions and
--  * limitations under the License.
--  */
BEGIN TRANSACTION;

CREATE TABLE  "Clusters" (
  cluster_name TEXT, -- Cluster name
  version TEXT, -- version of the hadoop stack installed
  state TEXT, -- cluster state - installed, config in progress etc
  PRIMARY KEY (cluster_name)
);

CREATE TABLE  "Services" (
  id INTEGER,
  service_name TEXT, -- Service name
  description TEXT, -- Service description
  display_name TEXT, -- Display name
  attributes BLOB, -- Per-Service attributes stored as a JSON serialized string conforming to
                   -- the following schema:
                   --
                   -- { "runnable": boolean, "mustInstall": boolean, "editable": boolean, "noDisplay": boolean }
                   --     where:
                   --
                   --     "runnable": true for services like Sqoop and Pig that don't have any
                   --                 running components, and can thus not be started/stopped.
                   --     "mustInstall": true for services that MUST be installed on a cluster,
                   --                    with no option for the user to say otherwise.
                   --     "editable": false for services like ZooKeeper whose selectability
                   --                 cannot be edited, and is instead controlled completely by
                   --                 our internal needs.
                   --     "noDisplay": true for services that shouldn't be displayed in the UI.
  PRIMARY KEY (id),
  UNIQUE (service_name)
);

INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
  ( "HDFS", "HDFS", '{ "runnable": true, "mustInstall": true, "editable": false, "noDisplay": false }', "Apache Hadoop Distributed File System" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "MAPREDUCE", "MapReduce", '{ "runnable": true, "mustInstall": true, "editable": false, "noDisplay": false }', "Apache Hadoop Distributed Processing Framework" );
INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
  ( "YARN", "YARN", '{ "runnable": true, "mustInstall": true, "editable": false, "noDisplay": false }', "Apache Hadoop Yarn Framework" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "ZOOKEEPER", "ZooKeeper", '{ "runnable": true, "mustInstall": false, "editable": false, "noDisplay": false }', "Centralized Service for Configuration Management and Distribution Synchronization" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "HBASE", "HBase", '{ "runnable": true, "mustInstall": false, "editable": true, "noDisplay": false }',  "Apache HDFS-based Non-relational Distributed Database" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "PIG", "Pig", '{ "runnable": false, "mustInstall": false, "editable": true, "noDisplay": false }',  "Platform for Analyzing Large Data Sets" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "SQOOP", "Sqoop", '{ "runnable": false, "mustInstall": false, "editable": true, "noDisplay": false }',  "Tool for transferring bulk data between Apache Hadoop and structured datastores such as relational databases" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "OOZIE", "Oozie", '{ "runnable": true, "mustInstall": false, "editable": true, "noDisplay": false }',  "Workflow/Coordination system to manage Apache Hadoop jobs" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "HIVE", "Hive/HCatalog", '{ "runnable": true, "mustInstall": false, "editable": true, "noDisplay": false }',  "Hive - Data Warehouse system for Apache Hadoop, HCatalog - Table and Storage Management service for data created using Apache Hadoop" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "TEMPLETON", "Templeton", '{ "runnable": true, "mustInstall": false, "editable": true, "noDisplay": false }',  "Webservice APIs for Apache Hadoop" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "DASHBOARD", "Dashboard", '{ "runnable": true, "mustInstall": true, "editable": false, "noDisplay": true }',  "Monitoring Dashboard for HDP" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "GANGLIA", "Ganglia", '{ "runnable": true, "mustInstall": true, "editable": false, "noDisplay": false }',  "Ganglia-based Metrics Collection for HDP" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "NAGIOS", "Nagios", '{ "runnable": true, "mustInstall": true, "editable": false, "noDisplay": false }',  "Nagios-based Monitoring for HDP" );
-- INSERT OR REPLACE INTO "Services" ( service_name, display_name, attributes, description ) VALUES
--   ( "MISCELLANEOUS", "Miscellaneous", '{ "runnable": false, "mustInstall": true, "editable": false, "noDisplay": true }',  "" );

CREATE TABLE  "ServiceComponents" (
  service_name TEXT, -- service name
  component_name TEXT, -- component name
  display_name TEXT, -- Component display name
  description TEXT, -- component description
  attributes BLOB, -- Per-ServiceComponent attributes stored as a JSON serialized string
                   -- conforming to the following schema:
                   --
                   -- { "isMaster": boolean, "isClient": boolean }
                   --     where:
                   --
                   --     "isMaster": true if this component plays the role of a master
                   --                 for the service.
                   --     "isClient": true if this component plays the role of a client
                   --                 for the service.
  PRIMARY KEY (component_name),
  FOREIGN KEY (service_name) REFERENCES Services(service_name)
);

INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
  ( "HDFS", "NAMENODE", "NameNode", '{ "isMaster": true, "isClient": false }', "Master server that manages the file system namespace and regulates access to files by clients" );
INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
  ( "HDFS", "SNAMENODE", "Secondary NameNode", '{ "isMaster": true, "isClient": false }', "Helper to the primary NameNode that is responsible for supporting periodic checkpoints of the HDFS metadata" );
INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
  ( "HDFS", "DATANODE", "Datanode", '{ "isMaster": false, "isClient": false }', "The slave for HDFS" );
INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
  ( "HDFS", "HDFS_CLIENT", "HDFS Client", '{ "isMaster": false, "isClient": true}', "Client component for HDFS" );
INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
  ( "YARN", "RESOURCEMANAGER", "ResourceManager", '{ "isMaster": true, "isClient": false }', "The resource manager manages the global assignment of compute resources to applications");
INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
  ( "YARN", "NODEMANAGER", "NodeManager", '{ "isMaster": false, "isClient": false }', "The NodeManager is the per-machine framework agent" );


-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "MAPREDUCE", "JOBTRACKER", "JobTracker", '{ "isMaster": true, "isClient": false }', "Central Master service that pushes work (MR tasks) out to available TaskTracker nodes in the cluster");
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "MAPREDUCE", "TASKTRACKER", "TaskTracker", '{ "isMaster": false, "isClient": false }', "The slave for MapReduce" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "MAPREDUCE", "MAPREDUCE_CLIENT", "MapReduce Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "ZOOKEEPER", "ZOOKEEPER_SERVER", "ZooKeeper Server", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "ZOOKEEPER", "ZOOKEEPER_CLIENT", "ZooKeeper Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "HBASE", "HBASE_MASTER", "HBase Master", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "HBASE", "HBASE_REGIONSERVER", "HBase Region Server", '{ "isMaster": false, "isClient": false }', "The slave for HBase" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "HBASE", "HBASE_CLIENT", "HBase Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "PIG", "PIG_CLIENT", "Pig Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "SQOOP", "SQOOP_CLIENT", "Sqoop Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "OOZIE", "OOZIE_SERVER", "Oozie Server", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "OOZIE", "OOZIE_CLIENT", "Oozie Client", '{ "isMaster": false, "isClient": true }',  "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "HIVE", "HIVE_MYSQL", "MySql Server for Hive", '{ "isMaster": false, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "HIVE", "HIVE_SERVER", "Hive Metastore", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "HIVE", "HIVE_CLIENT", "Hive Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "TEMPLETON", "TEMPLETON_SERVER", "Templeton Server", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "TEMPLETON", "TEMPLETON_CLIENT", "Templeton Client", '{ "isMaster": false, "isClient": true }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "DASHBOARD", "DASHBOARD", "Monitoring Dashboard", '{ "isMaster": false, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "NAGIOS", "NAGIOS_SERVER", "Nagios Server", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "GANGLIA", "GANGLIA_MONITOR_SERVER", "Ganglia Collector", '{ "isMaster": true, "isClient": false }', "" );
-- INSERT OR REPLACE INTO "ServiceComponents" ( service_name, component_name, display_name, attributes, description ) VALUES
--   ( "GANGLIA", "GANGLIA_MONITOR", "Ganglia Slave", '{ "isMaster": false, "isClient": false }', "" );

CREATE TABLE  "ServiceDependencies" (
  from_service_name TEXT, -- service A depends on B
  to_service_name TEXT, -- service B
  PRIMARY KEY ( from_service_name, to_service_name ),
  FOREIGN KEY (from_service_name) REFERENCES Services(service_name),
  FOREIGN KEY (to_service_name) REFERENCES Services(service_name)
);
CREATE INDEX  svc_dep_index ON "ServiceDependencies" ( to_service_name );

INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "YARN" , "HDFS" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "HBASE" , "ZOOKEEPER" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "HBASE" , "HDFS" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "OOZIE" , "MAPREDUCE" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "HIVE" , "MAPREDUCE" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "TEMPLETON" , "MAPREDUCE" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "TEMPLETON" , "PIG" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "TEMPLETON" , "HIVE" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "TEMPLETON" , "ZOOKEEPER" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "PIG" , "MAPREDUCE" );
-- INSERT OR REPLACE INTO "ServiceDependencies" ( from_service_name, to_service_name ) VALUES ( "SQOOP" , "MAPREDUCE" );
-- todo need to add all dependencies

CREATE TABLE  "ServiceComponentDependencies" (
  from_component_name TEXT, -- component  A depends on B
  to_component_name TEXT, -- component B
  PRIMARY KEY ( from_component_name, to_component_name ),
  FOREIGN KEY (from_component_name) REFERENCES ServiceComponents(component_name),
  FOREIGN KEY (to_component_name) REFERENCES ServiceComponents(component_name)
);
CREATE INDEX  component_dep_index ON "ServiceComponentDependencies" ( to_component_name );

INSERT OR REPLACE INTO "ServiceComponentDependencies" ( from_component_name, to_component_name ) VALUES ( "DATANODE", "NAMENODE" );
INSERT OR REPLACE INTO "ServiceComponentDependencies" ( from_component_name, to_component_name ) VALUES ( "SNAMENODE", "NAMENODE" );
INSERT OR REPLACE INTO "ServiceComponentDependencies" ( from_component_name, to_component_name ) VALUES ( "NODEMANAGER", "RESOURCEMANAGER" );

-- TODO add inserts for dependencies

CREATE TABLE  "ServiceInfo" (
  cluster_name TEXT, -- foreign-key cluster_name
  service_name TEXT, -- foreign-key
  state TEXT, -- current state of the service
  desired_state TEXT, -- desired state of the service
  is_enabled BOOL, -- whether service is enabled
  PRIMARY KEY(cluster_name, service_name),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name),
  FOREIGN KEY (service_name) REFERENCES Services(service_name)
);

CREATE TABLE  "ServiceComponentInfo" (
  cluster_name TEXT, -- foreign-key cluster_name
  service_name TEXT, -- foreign-key
  component_name TEXT, -- foreign-key
  state TEXT, -- current state of the service
  desired_state TEXT, -- desired state of the service
  PRIMARY KEY(cluster_name, component_name),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name),
  FOREIGN KEY (service_name) REFERENCES Services(service_name),
  FOREIGN KEY (component_name) REFERENCES ServiceComponents(component_name)
);

CREATE TABLE  ConfigProperties (
  key TEXT, -- property key
  default_value TEXT, -- default value
  display_name TEXT, -- display name
  description TEXT, -- description
  service_name TEXT, -- service to which this property belongs to
  display_type TEXT, -- display type, for frontend (vikram needs it). NODISPLAY for not showing on the frontend and DISPLAY for showing it.
  display_attributes TEXT, -- display attributes stored as a JSON serialized string
                   -- conforming to the following schema:
                   --
                   -- { "isPassword": boolean, "noDisplay": boolean, "reconfigurable": boolean, "displayType": string }
                   --     where:
                   --
                   --     "isPassword": true if the value is a password field
                   --     "noDisplay": true if the config is not meant to be displayed
                   --     "reconfigurable": whether the value can be edited during reconfiguration - default false if not set
                   --     "displayType": checkbox, multi-button checkbox, etc
                   --     "displayValues": possible values in case of multi-value selection ( not required for single value which is covered by the default value
                   --     "unit": unit to show.  if not used, leave it undefined
                   --     "editable": if editable on configurations page - default true if not set
  PRIMARY KEY (key) ,
  FOREIGN KEY (service_name) REFERENCES Services(service_name)
);

INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "dfs_name_dir", "", "NameNode directories", "NameNode directories for HDFS to store the file system image", "HDFS", "TEXT", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text", "editable": true }' );
INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "dfs_data_dir", "",  "DataNode directories", "DataNode directories for HDFS to store the data blocks", "HDFS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text", "editable": true }' );
INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "fs_checkpoint_dir", "",  "SecondaryNameNode Checkpoint directory", "Directory on the local filesystem where the Secondary NameNode should store the temporary images to merge", "HDFS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text", "editable": true }' );
INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "yarn_local_dir", "", "yarn nodemanager local directories", "Directories for NODEMANAGER to store intermediate data files", "YARN", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text", "editable": true }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "oozie_data_dir", "", "Oozie DB directory", "Data directory in which the Oozie DB exists", "OOZIE", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text", "editable": true }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "zk_data_dir", "", "ZooKeeper directory", "Data directory for ZooKeeper", "ZOOKEEPER", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text", "editable": true }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hive_mysql_host", "", "MySQL host", "MySQL host on which the Hive Metastore is hosted. If left empty, the metastore will be set up on the same host as the Hive Server using the database name and user credentials specified", "HIVE" , "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hive_database_name", "hive", "MySQL Database Name", "MySQL Database name used as the Hive Metastore", "HIVE", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hive_metastore_user_name", "hive", "MySQL user", "MySQL username to use to connect to the MySQL database", "HIVE", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hive_metastore_user_passwd", "", "MySQL password", "MySQL password to use to connect to the MySQL database", "HIVE", "SECRET", '{ "isPassword": true, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "jdk_location", "", "URL to download 32/64-bit JDK", "URL from where the Java JDK binary can be downloaded", "MISCELLANEOUS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "java32_home", "", "Path to 32-bit JAVA_HOME", "Path to 32-bit JAVA_HOME", "MISCELLANEOUS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "java64_home", "", "Path to 64-bit JAVA_HOME", "Path to 64-bit JAVA_HOME", "MISCELLANEOUS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hdfs_user", "hdfs", "HDFS User Name", "User to run HDFS as", "HDFS", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "mapred_user", "mapred", "MapRed User Name", "User to run MapReduce as", "MAPREDUCE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "dfs_support_append", "true", "Append enabled", "Whether enable HDFS Append feature", "HDFS", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": true, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "dfs_webhdfs_enabled", "false", "WebHDFS enabled", "Whether to enable WebHDFS feature", "HDFS", "ONOFF", '{ "isPassword": false, "noDisplay": true, "reconfigurable": true, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hadoop_logdirprefix", "/var/log/hadoop", "Hadoop Log DIR", "Directory for hadoop log files", "MISCELLANEOUS", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hadoop_piddirprefix", "/var/run/hadoop", "Hadoop PID DIR", "Directory in which the pid files for hadoop processes will be created", "MISCELLANEOUS", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "scheduler_name", "org.apache.hadoop.mapred.CapacityTaskScheduler", "MapReduce Capacity Scheduler", "The scheduler to use for scheduling of MapReduce jobs", "MAPREDUCE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": true, "displayType": "buttongroup" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hbase_log_dir", "/var/log/hbase", "HBase Log DIR", "Directory for HBASE logs", "HBASE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hbase_pid_dir", "/var/run/hbase", "HBase PID DIR", "Directory in which the pid files for HBASE processes will be created", "HBASE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hbase_user", "hbase", "HBase User Name", "User to run HBASE as", "HBASE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "zk_log_dir", "/var/log/zookeeper", "ZooKeeper Log directory", "Directory for ZooKeeper log files", "ZOOKEEPER", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "zk_pid_dir", "/var/run/zookeeper", "ZooKeeper PID directory", "Directory in which the pid files for zookeeper processes will be created", "ZOOKEEPER", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "zk_user", "zookeeper", "ZooKeeper User", "User to run ZooKeeper as", "ZOOKEEPER", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hcat_logdirprefix", "/var/log/hcatalog", "HCAT Log Dir", "Directory for HCatalog logs", "HIVE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hcat_logdirprefix", "/var/log/hcatalog", "HCAT Log Dir", "Directory in which the pid files for hcatalog processes will be created", "HIVE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "hcat_user", "hcat", "HCAT User Name", "User to run HCatalog as", "HIVE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "templeton_user", "templeton", "Templeton User Name", "User to run Templeton as", "TEMPLETON", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "templeton_pid_dir", "/var/run/templeton", "Templeton PID Dir", "Directory in which the pid files for templeton processes will be created", "TEMPLETON", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "templeton_log_dir", "/var/log/templeton", "Templeton Log Dir", "Directory for templeton logs", "TEMPLETON", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "oozie_log_dir", "/var/log/oozie", "Oozie Log Dir", "Directory for oozie logs", "OOZIE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "oozie_pid_dir", "/var/pid/oozie", "Oozie PID Dir", "Directory in which the pid files for oozie processes will be created", "OOZIE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "oozie_user", "oozie", "Oozie User Name", "User to run Oozie as", "OOZIE", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );

-- Configurations for nagios
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "nagios_web_login", "nagiosadmin", "Nagios Admin username", "Nagios Web UI Admin username", "NAGIOS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "nagios_web_password", "", "Nagios Admin password", "Nagios Web UI Admin password", "NAGIOS", "SECRET", '{ "isPassword": true, "noDisplay": false, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "nagios_contact", "", "Hadoop Admin email", "Hadoop Administrator email for alert notification", "NAGIOS", "", '{ "isPassword": false, "noDisplay": false, "reconfigurable": true, "displayType": "text" }' );

-- Configuration for local yum mirror support
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "yum_repo_file", "/etc/yum.repos.d/hdp.repo", "Path to YUM Repo file", "Path to YUM Repo file", "MISCELLANEOUS", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "text" }' );
-- INSERT OR REPLACE INTO "ConfigProperties" ( key, default_value, display_name, description, service_name, display_type, display_attributes ) VALUES ( "using_local_repo", "false", "Whether a local repo is being used", "Whether a local repo is being used", "MISCELLANEOUS", "NODISPLAY", '{ "isPassword": false, "noDisplay": true, "reconfigurable": false, "displayType": "checkbox" }' );


CREATE TABLE  ServiceConfig (
  cluster_name TEXT, -- foreign-key cluster_name
  key TEXT, -- property key
  value TEXT, -- property value
  PRIMARY KEY (cluster_name, key),
  FOREIGN KEY (key) REFERENCES ConfigProperties(key),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name)
);

CREATE TABLE  "Hosts" (
  cluster_name TEXT, -- foreign-key cluster_name
  host_name TEXT,  -- host name
  ip TEXT,  -- ip
  total_mem   INTEGER,  -- total mem on host - in bytes
  cpu_count   INTEGER,  -- cpu count - no. of cores
  os_arch TEXT, -- os arch - i386, x86_64 etc
  os_type TEXT, -- os type - searchable - defined set of supported OS types - RHEL5, RHEL6, CENTOS5, SLES, etc.
  os BLOB, -- os info - type, version etc - uname -a?
  disks_info BLOB, -- disk capacity json object, keys are mount-points
  discovery_status TEXT, -- discovery state - if we could connect properly
  bad_health_reason TEXT, -- failure reason if any
  rack_info TEXT, -- rack information for host
  attributes BLOB, -- attributes blob to store additional attributes that may be required for the host
                   -- attributes stored currently:
                      -- "publicFQDN" => public hostname in case of AWS ( same as hostname in other environments )
                      -- "privateFQDN" => private hostname in case of AWS ( same as hostname in other environments )
  PRIMARY KEY(host_name),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name),
  UNIQUE(ip)
);
CREATE INDEX  host_mem_index ON "Hosts" ( total_mem );

CREATE TABLE  "HostRoles" (
  role_id INTEGER, --autoincrement primary key
  cluster_name TEXT, --foreign key
  host_name TEXT, --foreign key
  component_name TEXT, -- One component of a service running on this host, like DN of HDFS
  state TEXT, -- current state of the host
  desired_state TEXT, -- desired state of this host
  PRIMARY KEY (role_id),
  UNIQUE (host_name, component_name),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name),
  FOREIGN KEY (host_name) REFERENCES Hosts(host_name),
  FOREIGN KEY (component_name) REFERENCES ServiceComponents(component_name)
);

CREATE TABLE "HostRoleConfig" (
  cluster_name TEXT, --foreign key
  host_name TEXT, --foreign key
  component_name TEXT, -- One component of a service running on this host, like DN of HDFS
  key TEXT, -- property key
  value TEXT, -- property value
  PRIMARY KEY (cluster_name, host_name, component_name, key),
  FOREIGN KEY (key) REFERENCES ConfigProperties(key),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name),
  FOREIGN KEY (host_name) REFERENCES Hosts(host_name),
  FOREIGN KEY (component_name) REFERENCES ServiceComponents(component_name)
);

CREATE TABLE  "ConfigHistory" (
  cluster_name TEXT, -- foreign-key cluster_name
  version INTEGER, -- auto inc version
  config BLOB, -- config blob
  change_log BLOB, -- changelog update message for change
  update_time INTEGER, -- unix time when change was made
  PRIMARY KEY (version),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name)
);

CREATE TABLE  "TransactionStatus" (
  cluster_name TEXT, -- cluster name foreign key
  txn_id INTEGER, -- primary key auto-increment
  create_time INTEGER, -- time when txn was created - unix time
  status_info BLOB, -- blob containing all info pertaining to txn
  pid_info BLOB, -- blob containing single or list of pids attached to txn
  PRIMARY KEY (txn_id),
  FOREIGN KEY (cluster_name) REFERENCES Clusters(cluster_name)
);

CREATE TABLE  "SubTransactionStatus" (
  cluster_name TEXT, -- cluster name foreign key
  txn_id INTEGER, -- txn id foreign key
  sub_txn_id INTEGER, -- sub txn id
  parent_sub_txn_id INTEGER, -- parent sub txn id
  state TEXT, -- state info
  description TEXT, -- additional description
  progress TEXT, -- progress status of sub-txn
  sub_txn_type TEXT, -- at what level is the txn taking place i.e cluster,svc,comp
  op_status BLOB, -- status of operation - misc. info from puppet
  PRIMARY KEY (cluster_name, txn_id, sub_txn_id),
  FOREIGN KEY (txn_id) REFERENCES TransactionStatus(txn_id)
);


COMMIT;
